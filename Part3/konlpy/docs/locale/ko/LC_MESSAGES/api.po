#
msgid ""
msgstr ""
"Project-Id-Version: KoNLPy 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-13 19:33+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../api.rst:2
msgid "API"
msgstr ""

#: ../../api/konlpy.rst:2
msgid "konlpy Package"
msgstr ""

#: ../../api/konlpy.rst:5
msgid "Subpackages"
msgstr ""

#: ../../api/konlpy.rst:13
msgid ":mod:`data` Module"
msgstr ""

#: konlpy.data.find:1 of
msgid ""
"Find the path of a given resource URL by searching through directories in"
" ``konlpy.data.path``. If the given resource is not found, raise a "
"``LookupError``, whose message gives a pointer to the installation "
"instructions for ``konlpy.download()``."
msgstr ""

#: konlpy.corpus.CorpusLoader.abspath konlpy.corpus.CorpusLoader.open
#: konlpy.data.find konlpy.data.load konlpy.jvm.init_jvm
#: konlpy.tag._hannanum.Hannanum konlpy.tag._hannanum.Hannanum.pos
#: konlpy.tag._kkma.Kkma konlpy.tag._kkma.Kkma.pos konlpy.tag._komoran.Komoran
#: konlpy.tag._komoran.Komoran.pos konlpy.tag._mecab.Mecab
#: konlpy.tag._mecab.Mecab.pos konlpy.tag._okt.Okt konlpy.tag._okt.Okt.pos
#: konlpy.utils.concordance konlpy.utils.partition of
msgid "Parameters"
msgstr ""

#: konlpy.data.find:8 of
msgid ""
"The URL of the resource to search for. URLs are posix-style relative path"
" names, such as ``corpora/kolaw``. In particular, directory names should "
"always be separated by the forward slash character (i.e., '/'), which "
"will be automatically converted to a platform-appropriate path separator "
"by KoNLPy."
msgstr ""

#: konlpy.data.load:1 of
msgid ""
"Load a given resource from the KoNLPy data package. If no format is "
"specified, ``load()`` will attempt to determine a format based on the "
"resource name's file extension. If that fails, ``load()`` will raise a "
"``ValueError`` exception."
msgstr ""

#: konlpy.data.load:7 of
msgid "A URL specifying where the resource should be loaded from."
msgstr ""

#: konlpy.data.load:8 of
msgid "Format type of resource."
msgstr ""

#: konlpy.data.listdir:1 of
msgid "list konlpy default data directory."
msgstr ""

#: konlpy.data.clear:1 of
msgid "clear the konlpy output data directory"
msgstr ""

#: konlpy.data.path:1 of
msgid ""
"A list of directories where the KoNLPy data package might reside. These "
"directories will be checked in order when looking for a resource. Note "
"that this allows users to substitute their own versions of resources."
msgstr ""

#: konlpy.data.FileSystemPathPointer:1 of
msgid "Bases: :class:`konlpy.data.PathPointer`, :class:`str`"
msgstr ""

#: konlpy.data.FileSystemPathPointer:1 of
msgid "A path pointer that identifies a file by an absolute path."
msgstr ""

#: konlpy.corpus.CorpusLoader:1 konlpy.data.CorpusReader:1
#: konlpy.data.PathPointer:1 konlpy.data.StringWriter:1
#: konlpy.downloader.Downloader:1 konlpy.tag._hannanum.Hannanum:1
#: konlpy.tag._kkma.Kkma:1 konlpy.tag._komoran.Komoran:1
#: konlpy.tag._mecab.Mecab:1 konlpy.tag._okt.Okt:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: konlpy.data.PathPointer:1 of
msgid ""
"An abstract base class for path pointers. One subclass exists: 1. "
"``FileSystemPathPointer``: Identifies a file by an absolute path."
msgstr ""

#: konlpy.data.CorpusReader.read:1 of
msgid ""
"read method reads all files included in items attr and save it into "
"corpus dictionary."
msgstr ""

#: ../../api/konlpy.rst:21
msgid ":mod:`downloader` Module"
msgstr ""

#: konlpy.downloader.Downloader:1 of
msgid ""
"A class used to access the KoNLPy data server, which can be used to "
"download packages."
msgstr ""

#: konlpy.downloader.Downloader.download:1 konlpy.downloader.download:1 of
msgid ""
"The KoNLPy data downloader. With this module you can download corpora, "
"models and other data packages that can be used with KoNLPy."
msgstr ""

#: konlpy.downloader.Downloader.download:8 konlpy.downloader.download:8 of
msgid ""
"Individual packages can be downloaded by passing a single argument, the "
"package identifier for the package that should be downloaded:"
msgstr ""

#: konlpy.downloader.Downloader.download:14 konlpy.downloader.download:14 of
msgid ""
"To download all packages, simply call ``download`` with the argument "
"'all':"
msgstr ""

#: konlpy.downloader.default_download_dir:1 of
msgid ""
"Returns the directory to which packages will be downloaded by default. "
"This value can be overriden using the constructor, or on a case-by-case "
"basis using the ``download_dir`` argument when calling ``download()``."
msgstr ""

#: konlpy.downloader.default_download_dir:6 of
msgid ""
"On Windows, the default download directory is ``PYTHONHOME/lib/konlpy``, "
"where *PYTHONHOME* is the directory containing Python e.g., "
"``C:\\Python27``."
msgstr ""

#: konlpy.downloader.default_download_dir:9 of
msgid ""
"On all other platforms, the default directory is the first of the "
"following which exists or which can be created with write permission: "
"``/usr/share/konlpy_data``, ``/usr/local/share/konlpy_data``, "
"``/usr/lib/konlpy_data``, ``/usr/local/lib/konlpy_data``, "
"``~/konlpy_data``."
msgstr ""

#: ../../api/konlpy.rst:29
msgid ":mod:`jvm` Module"
msgstr ""

#: konlpy.jvm.init_jvm:1 of
msgid "Initializes the Java virtual machine (JVM)."
msgstr ""

#: konlpy.jvm.init_jvm:3 of
msgid ""
"The path of the JVM. If left empty, inferred by "
":py:func:`jpype.getDefaultJVMPath`."
msgstr ""

#: konlpy.jvm.init_jvm:4 of
msgid ""
"Maximum memory usage limitation (Megabyte). Default is 1024 (1GB). If you"
" set this value too small, you may got out of memory. We recommend that "
"you set it 1024 ~ 2048 or more at least. However, if this value is too "
"large, you may see inefficient memory usage."
msgstr ""

#: ../../api/konlpy.rst:37
msgid ":mod:`utils` Module"
msgstr ""

#: konlpy.utils.PropagatingThread:1 of
msgid "Bases: :class:`threading.Thread`"
msgstr ""

#: konlpy.utils.PropagatingThread:1 of
msgid "PropagatingThread is just a fancy wrapper for Thread to manage exceptions."
msgstr ""

#: konlpy.utils.PropagatingThread:4 of
msgid "Raises:"
msgstr ""

#: konlpy.utils.PropagatingThread:4 of
msgid "self.exception: Exception defined in higher-level."
msgstr ""

#: konlpy.utils.PropagatingThread:8 konlpy.utils.delete_links:6
#: konlpy.utils.delete_mentions:6 of
msgid "Returns:"
msgstr ""

#: konlpy.utils.PropagatingThread:7 of
msgid "self.ret: Thread target object."
msgstr ""

#: konlpy.utils.PropagatingThread.join:1 of
msgid "Wait until the thread terminates."
msgstr ""

#: konlpy.utils.PropagatingThread.join:3 of
msgid ""
"This blocks the calling thread until the thread whose join() method is "
"called terminates -- either normally or through an unhandled exception or"
" until the optional timeout occurs."
msgstr ""

#: konlpy.utils.PropagatingThread.join:7 of
msgid ""
"When the timeout argument is present and not None, it should be a "
"floating point number specifying a timeout for the operation in seconds "
"(or fractions thereof). As join() always returns None, you must call "
"is_alive() after join() to decide whether a timeout happened -- if the "
"thread is still alive, the join() call timed out."
msgstr ""

#: konlpy.utils.PropagatingThread.join:13 of
msgid ""
"When the timeout argument is not present or None, the operation will "
"block until the thread terminates."
msgstr ""

#: konlpy.utils.PropagatingThread.join:16 of
msgid "A thread can be join()ed many times."
msgstr ""

#: konlpy.utils.PropagatingThread.join:18 of
msgid ""
"join() raises a RuntimeError if an attempt is made to join the current "
"thread as that would cause a deadlock. It is also an error to join() a "
"thread before it has been started and attempts to do so raises the same "
"exception."
msgstr ""

#: konlpy.utils.PropagatingThread.run:1 of
msgid "Method representing the thread's activity."
msgstr ""

#: konlpy.utils.PropagatingThread.run:3 of
msgid ""
"You may override this method in a subclass. The standard run() method "
"invokes the callable object passed to the object's constructor as the "
"target argument, if any, with sequential and keyword arguments taken from"
" the args and kwargs arguments, respectively."
msgstr ""

#: konlpy.utils.char2hex:1 of
msgid "Converts a unicode character to hex."
msgstr ""

#: konlpy.utils.concordance:1 of
msgid "Find concordances of a phrase in a text."
msgstr ""

#: konlpy.utils.concordance:3 of
msgid ""
"The farmost left numbers are indices, that indicate the location of the "
"phrase in the text (by means of tokens). The following string, is part of"
" the text surrounding the phrase for the given index."
msgstr ""

#: konlpy.utils.concordance:8 of
msgid "Phrase to search in the document."
msgstr ""

#: konlpy.utils.concordance:9 of
msgid "Target document."
msgstr ""

#: konlpy.utils.concordance:10 of
msgid "If ``True``, shows locations of the phrase on the console."
msgstr ""

#: konlpy.utils.delete_links:1 of
msgid "Delete links from input string"
msgstr ""

#: konlpy.utils.delete_links:4 konlpy.utils.delete_mentions:4 of
msgid "Args:"
msgstr ""

#: konlpy.utils.delete_links:4 of
msgid "string (str): string to delete links"
msgstr ""

#: konlpy.utils.delete_links:7 of
msgid "str: string without links"
msgstr ""

#: konlpy.utils.delete_mentions:1 of
msgid "Delete at marks from input string"
msgstr ""

#: konlpy.utils.delete_mentions:4 of
msgid "string (str): string to delete at marks"
msgstr ""

#: konlpy.utils.delete_mentions:7 of
msgid "str: string without at marks."
msgstr ""

#: konlpy.utils.hex2char:1 of
msgid "Converts a hex character to unicode."
msgstr ""

#: konlpy.utils.load_txt:1 of
msgid "Text file loader. To read a file, use ``read_txt()``instead."
msgstr ""

#: konlpy.utils.partition:1 of
msgid "Partitions a list to several parts using indices."
msgstr ""

#: konlpy.utils.partition:3 of
msgid "The target list."
msgstr ""

#: konlpy.utils.partition:4 of
msgid "Indices to partition the target list."
msgstr ""

#: konlpy.utils.read_json:1 of
msgid "JSON file reader."
msgstr ""

#: konlpy.utils.read_txt:1 of
msgid "Text file reader."
msgstr ""

#: konlpy.utils.select:1 of
msgid "Replaces some ambiguous punctuation marks to simpler ones."
msgstr ""

#: ../../api/konlpy.corpus.rst:2
msgid "corpus Package"
msgstr ""

#: konlpy.corpus.CorpusLoader:1 of
msgid ""
"Loader for corpora. For a complete list of corpora available in KoNLPy, "
"refer to :ref:`corpora`."
msgstr ""

#: konlpy.corpus.CorpusLoader.abspath:1 of
msgid ""
"Absolute path of corpus file. If ``filename`` is *None*, returns absolute"
" path of corpus."
msgstr ""

#: konlpy.corpus.CorpusLoader.abspath:4 konlpy.corpus.CorpusLoader.open:4 of
msgid "Name of a particular file in the corpus."
msgstr ""

#: konlpy.corpus.CorpusLoader.fileids:1 of
msgid "List of file IDs in the corpus."
msgstr ""

#: konlpy.corpus.CorpusLoader.open:1 of
msgid "Method to open a file in the corpus. Returns a file object."
msgstr ""

#: ../../api/konlpy.tag.rst:2
msgid "tag Package"
msgstr ""

#: ../../api/konlpy.tag.rst:6
msgid ""
"Initial runs of each class method may require some time to load "
"dictionaries (< 1 *min*). Second runs should be faster."
msgstr ""

#: ../../api/konlpy.tag.rst:10
msgid ":class:`Hannanum` Class"
msgstr ""

#: konlpy.tag._hannanum.Hannanum:1 of
msgid ""
"Wrapper for `JHannanum "
"<http://semanticweb.kaist.ac.kr/home/index.php/HanNanum>`_."
msgstr ""

#: konlpy.tag._hannanum.Hannanum:3 of
msgid ""
"JHannanum is a morphological analyzer and POS tagger written in Java, and"
" developed by the `Semantic Web Research Center (SWRC) "
"<http://semanticweb.kaist.ac.kr/>`_ at KAIST since 1999."
msgstr ""

#: konlpy.tag._hannanum.Hannanum:21 konlpy.tag._kkma.Kkma:24
#: konlpy.tag._komoran.Komoran:20 konlpy.tag._okt.Okt:23 of
msgid "The path of the JVM passed to :py:func:`.init_jvm`."
msgstr ""

#: konlpy.tag._hannanum.Hannanum:22 konlpy.tag._kkma.Kkma:25
#: konlpy.tag._komoran.Komoran:36 konlpy.tag._okt.Okt:24 of
msgid "Maximum memory usage limitation (Megabyte) :py:func:`.init_jvm`."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.analyze:1 of
msgid "Phrase analyzer."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.analyze:3 of
msgid ""
"This analyzer returns various morphological candidates for each token. It"
" consists of two parts: 1) Dictionary search (chart), 2) Unclassified "
"term segmentation."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.morphs:1 konlpy.tag._kkma.Kkma.morphs:1
#: konlpy.tag._komoran.Komoran.morphs:1 konlpy.tag._mecab.Mecab.morphs:1
#: konlpy.tag._okt.Okt.morphs:1 of
msgid "Parse phrase to morphemes."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.nouns:1 konlpy.tag._kkma.Kkma.nouns:1
#: konlpy.tag._komoran.Komoran.nouns:1 konlpy.tag._mecab.Mecab.nouns:1
#: konlpy.tag._okt.Okt.nouns:1 of
msgid "Noun extractor."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.pos:1 konlpy.tag._kkma.Kkma.pos:1
#: konlpy.tag._komoran.Komoran.pos:1 konlpy.tag._mecab.Mecab.pos:1 of
msgid "POS tagger."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.pos:3 of
msgid "This tagger is HMM based, and calculates the probability of tags."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.pos:5 of
msgid "The number of tags. It can be either 9 or 22."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.pos:6 konlpy.tag._kkma.Kkma.pos:3
#: konlpy.tag._komoran.Komoran.pos:3 konlpy.tag._mecab.Mecab.pos:3 of
msgid "If False, preserves eojeols."
msgstr ""

#: konlpy.tag._hannanum.Hannanum.pos:7 konlpy.tag._kkma.Kkma.pos:4
#: konlpy.tag._komoran.Komoran.pos:4 konlpy.tag._mecab.Mecab.pos:4
#: konlpy.tag._okt.Okt.pos:9 of
msgid "If True, returns joined sets of morph and tag."
msgstr ""

#: ../../api/konlpy.tag.rst:18
msgid ":class:`Kkma` Class"
msgstr ""

#: konlpy.tag._kkma.Kkma:1 of
msgid "Wrapper for `Kkma <http://kkma.snu.ac.kr>`_."
msgstr ""

#: konlpy.tag._kkma.Kkma:3 of
msgid ""
"Kkma is a morphological analyzer and natural language processing system "
"written in Java, developed by the Intelligent Data Systems (IDS) "
"Laboratory at `SNU <http://snu.ac.kr>`_."
msgstr ""

#: konlpy.tag._kkma.Kkma:22 of
msgid ""
"There are reports that ``Kkma()`` is weak for long strings with no spaces"
" between words. See issue :issue:`73` for details."
msgstr ""

#: konlpy.tag._kkma.Kkma.sentences:1 of
msgid "Sentence detection."
msgstr ""

#: ../../api/konlpy.tag.rst:26
msgid ":class:`Komoran` Class"
msgstr ""

#: konlpy.tag._komoran.Komoran:1 of
msgid "Wrapper for `KOMORAN <https://github.com/shin285/KOMORAN>`_."
msgstr ""

#: konlpy.tag._komoran.Komoran:3 of
msgid ""
"KOMORAN is a relatively new open source Korean morphological analyzer "
"written in Java, developed by `Shineware <http://shineware.co.kr>`_, "
"since 2013."
msgstr ""

#: konlpy.tag._komoran.Komoran:21 of
msgid ""
"The path to the user dictionary.  This enables the user to enter custom "
"tokens or phrases, that are mandatorily assigned to tagged as a "
"particular POS. Each line of the dictionary file should consist of a "
"token or phrase, followed by a POS tag, which are delimited with a "
"`<tab>` character.  An example of the file format is as follows:  .. "
"code-block:: python      바람과 함께 사라지다 NNG     바람과 함께      NNP     자연어 NNG"
"  If a particular POS is not assigned for a token or phrase, it will be "
"tagged as NNP."
msgstr ""

#: konlpy.tag._komoran.Komoran:21 of
msgid "The path to the user dictionary."
msgstr ""

#: konlpy.tag._komoran.Komoran:23 of
msgid ""
"This enables the user to enter custom tokens or phrases, that are "
"mandatorily assigned to tagged as a particular POS. Each line of the "
"dictionary file should consist of a token or phrase, followed by a POS "
"tag, which are delimited with a `<tab>` character."
msgstr ""

#: konlpy.tag._komoran.Komoran:26 of
msgid "An example of the file format is as follows:"
msgstr ""

#: konlpy.tag._komoran.Komoran:34 of
msgid ""
"If a particular POS is not assigned for a token or phrase, it will be "
"tagged as NNP."
msgstr ""

#: konlpy.tag._komoran.Komoran:35 of
msgid "The path to the Komoran HMM model."
msgstr ""

#: ../../api/konlpy.tag.rst:34
msgid ":class:`Mecab` Class"
msgstr ""

#: ../../api/konlpy.tag.rst:36
msgid "``Mecab()`` is not supported on ``Windows``."
msgstr ""

#: konlpy.tag._mecab.Mecab:1 of
msgid "Wrapper for MeCab-ko morphological analyzer."
msgstr ""

#: konlpy.tag._mecab.Mecab:3 of
msgid ""
"`MeCab`_, originally a Japanese morphological analyzer and POS tagger "
"developed by the Graduate School of Informatics in Kyoto University, was "
"modified to MeCab-ko by the `Eunjeon Project`_ to adapt to the Korean "
"language."
msgstr ""

#: konlpy.tag._mecab.Mecab:8 of
msgid ""
"In order to use MeCab-ko within KoNLPy, follow the directions in :ref"
":`optional-installations`."
msgstr ""

#: konlpy.tag._mecab.Mecab:24 of
msgid "The path of the MeCab-ko dictionary."
msgstr ""

#: ../../api/konlpy.tag.rst:44
msgid ":class:`Okt` Class"
msgstr ""

#: ../../api/konlpy.tag.rst:46
msgid "``Twitter()`` has changed to ``Okt()`` since v0.5.0."
msgstr ""

#: konlpy.tag._okt.Okt:1 of
msgid ""
"Wrapper for `Open Korean Text <https://github.com/open-korean-text/open-"
"korean-text>`_."
msgstr ""

#: konlpy.tag._okt.Okt:3 of
msgid ""
"Open Korean Text is an open source Korean tokenizer written in Scala, "
"developed by Will Hohyon Ryu."
msgstr ""

#: konlpy.tag._okt.Okt.phrases:1 of
msgid "Phrase extractor."
msgstr ""

#: konlpy.tag._okt.Okt.pos:1 of
msgid ""
"POS tagger. In contrast to other classes in this subpackage, this POS "
"tagger doesn't have a `flatten` option, but has `norm` and `stem` "
"options. Check the parameter list below."
msgstr ""

#: konlpy.tag._okt.Okt.pos:7 of
msgid "If True, normalize tokens."
msgstr ""

#: konlpy.tag._okt.Okt.pos:8 of
msgid "If True, stem tokens."
msgstr ""

#: konlpy.tag._okt.Twitter:1 of
msgid ""
"The ``Twitter()`` backend has changed to ``Okt()`` since KoNLPy v0.5.0. "
"See :issue:`141` for details."
msgstr ""

#: ../../api/konlpy.tag.rst:55
msgid ""
"`Korean POS tags comparison chart <https://docs.google.com/spreadsheets/d"
"/1OGAjUvalBuX-oZvZ_-9tEfYD2gQe7hTGsgUpiiBSXI8/edit#gid=0>`_"
msgstr ""

#: ../../api/konlpy.tag.rst:57
msgid "Compare POS tags between several Korean analytic projects. (In Korean)"
msgstr ""

#~ msgid ""
#~ "Wrapper for `KOMORAN "
#~ "<http://shineware.tistory.com/entry/KOMORAN-ver-24>`_."
#~ msgstr ""

#~ msgid ""
#~ "The path of dictionary files. The "
#~ "KOMORAN system dictionary is loaded by"
#~ " default."
#~ msgstr ""

#~ msgid "``Mecab()`` is not supported on ``Windows 7``."
#~ msgstr ""

#~ msgid ":class:`Twitter` Class"
#~ msgstr ""

#~ msgid ""
#~ "Wrapper for `Twitter Korean Text "
#~ "<https://github.com/twitter/twitter-korean-text>`_."
#~ msgstr ""

#~ msgid ""
#~ "Twitter Korean Text is an open "
#~ "source Korean tokenizer written in "
#~ "Scala, developed by Will Hohyon Ryu."
#~ msgstr ""

#~ msgid "Bases: :class:`pprint.PrettyPrinter`"
#~ msgstr ""

#~ msgid "Overrided method to enable Unicode pretty print."
#~ msgstr ""

#~ msgid "Reads a csv file."
#~ msgstr ""

#~ msgid "File object."
#~ msgstr ""

#~ msgid "Writes a csv file."
#~ msgstr ""

#~ msgid "A list of list."
#~ msgstr ""

#~ msgid "Unicode pretty printer."
#~ msgstr ""

#~ msgid ""
#~ "Option to stream to a particular "
#~ "destination. Can be either sys.stdout "
#~ "(default) or sys.stderr. See #179 for"
#~ " details."
#~ msgstr ""

